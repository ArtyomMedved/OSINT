import piexif
from pillow_heif import register_heif_opener
from PIL import Image
from geopy.geocoders import Nominatim

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è HEIC
register_heif_opener()

# –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É HEIC-—Ñ–∞–π–ª—É
file_path = "src/img/IMG_0798.HEIC"

def rational_to_float(rational):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ EXIF –≤ float."""
    return rational[0] / rational[1] if rational[1] != 0 else 0

def convert_to_decimal(degrees, minutes, seconds):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥—Ä–∞–¥—É—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    degrees = rational_to_float(degrees)
    minutes = rational_to_float(minutes)
    seconds = rational_to_float(seconds)
    return degrees + minutes / 60 + seconds / 3600

def get_address(lat, lon):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º geopy."""
    geolocator = Nominatim(user_agent="geo_exif_locator")
    location = geolocator.reverse((lat, lon), language="en")
    return location.address if location else "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"

def extract_exif(file_path):
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.open(file_path)

        # –ü–æ–ª—É—á–∞–µ–º EXIF –¥–∞–Ω–Ω—ã–µ
        exif_data = piexif.load(img.info.get("exif", b""))

        print("=" * 50)
        print("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ò")
        print("=" * 50)

        # –í—ã–≤–æ–¥–∏–º GPS –¥–∞–Ω–Ω—ã–µ
        gps_data = exif_data.get("GPS")
        if gps_data:
            print("\nüìç GPS-–î–ê–ù–ù–´–ï:")
            latitude = gps_data.get(piexif.GPSIFD.GPSLatitude)
            longitude = gps_data.get(piexif.GPSIFD.GPSLongitude)
            latitude_ref = gps_data.get(piexif.GPSIFD.GPSLatitudeRef, b'N').decode('utf-8')
            longitude_ref = gps_data.get(piexif.GPSIFD.GPSLongitudeRef, b'E').decode('utf-8')
            
            if latitude and longitude:
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                decimal_lat = convert_to_decimal(*latitude)
                decimal_lon = convert_to_decimal(*longitude)
                
                # –£—á–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (N/S, E/W)
                if latitude_ref == 'S':
                    decimal_lat = -decimal_lat
                if longitude_ref == 'W':
                    decimal_lon = -decimal_lon
                
                print(f"  –®–∏—Ä–æ—Ç–∞: {decimal_lat}¬∞")
                print(f"  –î–æ–ª–≥–æ—Ç–∞: {decimal_lon}¬∞")

                # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—ã
                address = get_address(decimal_lat, decimal_lon)
                google_maps_link = f"https://www.google.com/maps?q={decimal_lat},{decimal_lon}"
                print(f"\nüìå –ê–¥—Ä–µ—Å: {address}")
                print(f"üåç –°—Å—ã–ª–∫–∞ –Ω–∞ Google Maps: {google_maps_link}")
            else:
                print("  GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        else:
            print("\nüìç GPS-–î–ê–ù–ù–´–ï: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
        print("\nüì± –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ï–õ–ï–§–û–ù–ï:")
        phone_info_tags = {
            piexif.ImageIFD.Make: "Make",
            piexif.ImageIFD.Model: "Model",
            piexif.ImageIFD.Software: "Software",
            piexif.ImageIFD.DateTime: "DateTime",
            piexif.ImageIFD.HostComputer: "HostComputer",
            piexif.ExifIFD.PixelXDimension: "PixelXDimension",
            piexif.ExifIFD.PixelYDimension: "PixelYDimension",
            piexif.ExifIFD.LensMake: "LensMake",
            piexif.ExifIFD.LensModel: "LensModel",
        }

        for ifd, tag_name in phone_info_tags.items():
            for tag, value in exif_data.get("0th", {}).items():
                if tag == ifd:
                    print(f"  {tag_name}: {value}")

        print("\n" + "=" * 50)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
extract_exif(file_path)
