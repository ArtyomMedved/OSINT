import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from PIL import Image
from geopy.geocoders import Nominatim
import piexif
import exifread
from pillow_heif import register_heif_opener

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è HEIC
register_heif_opener()

SAVE_PATH = 'images'

if not os.path.exists(SAVE_PATH):
    os.makedirs(SAVE_PATH)

def rational_to_float(rational):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ EXIF –≤ float."""
    return rational[0] / rational[1] if rational[1] != 0 else 0

def convert_to_decimal(degrees, minutes, seconds):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥—Ä–∞–¥—É—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    degrees = rational_to_float(degrees)
    minutes = rational_to_float(minutes)
    seconds = rational_to_float(seconds)
    return degrees + minutes / 60 + seconds / 3600

def dms_to_decimal(dms, ref):
    """Convert DMS (Degrees, Minutes, Seconds) to Decimal Degrees."""
    degrees = dms[0].num / dms[0].den
    minutes = dms[1].num / dms[1].den / 60.0
    seconds = dms[2].num / dms[2].den / 3600.0
    result = degrees + minutes + seconds
    if ref in ['S', 'W']:
        result = -result
    return result

def get_address(lat, lon):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º geopy."""
    geolocator = Nominatim(user_agent="geo_exif_locator")
    location = geolocator.reverse((lat, lon), language="en")
    return location.address if location else "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"

def extract_exif_heic(file_path):
    try:
        img = Image.open(file_path)
        exif_data = piexif.load(img.info.get("exif", b""))

        gps_data = exif_data.get("GPS")
        if gps_data:
            latitude = gps_data.get(piexif.GPSIFD.GPSLatitude)
            longitude = gps_data.get(piexif.GPSIFD.GPSLongitude)
            latitude_ref = gps_data.get(piexif.GPSIFD.GPSLatitudeRef, b'N').decode('utf-8')
            longitude_ref = gps_data.get(piexif.GPSIFD.GPSLongitudeRef, b'E').decode('utf-8')

            if latitude and longitude:
                decimal_lat = convert_to_decimal(*latitude)
                decimal_lon = convert_to_decimal(*longitude)

                if latitude_ref == 'S':
                    decimal_lat = -decimal_lat
                if longitude_ref == 'W':
                    decimal_lon = -decimal_lon

                address = get_address(decimal_lat, decimal_lon)
                google_maps_link = f"https://www.google.com/maps?q={decimal_lat},{decimal_lon}"

                return {
                    'latitude': decimal_lat,
                    'longitude': decimal_lon,
                    'address': address,
                    'google_maps_link': google_maps_link,
                    'make': exif_data.get("0th", {}).get(piexif.ImageIFD.Make, 'Unknown'),
                    'model': exif_data.get("0th", {}).get(piexif.ImageIFD.Model, 'Unknown'),
                    'software': exif_data.get("0th", {}).get(piexif.ImageIFD.Software, 'Unknown'),
                    'datetime': exif_data.get("0th", {}).get(piexif.ImageIFD.DateTime, 'Unknown')
                }
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ HEIC —Ñ–∞–π–ª–∞: {e}")
        return None

def extract_exif_jpg_png(file_path):
    try:
        with open(file_path, 'rb') as image_file:
            tags = exifread.process_file(image_file, details=True)
        
        gps_latitude = tags.get('GPS GPSLatitude')
        gps_latitude_ref = tags.get('GPS GPSLatitudeRef')
        gps_longitude = tags.get('GPS GPSLongitude')
        gps_longitude_ref = tags.get('GPS GPSLongitudeRef')
        
        latitude = dms_to_decimal(gps_latitude.values, gps_latitude_ref.values) if gps_latitude else None
        longitude = dms_to_decimal(gps_longitude.values, gps_longitude_ref.values) if gps_longitude else None

        address = get_address(latitude, longitude) if latitude and longitude else '–ù–µ—Ç GPS-–¥–∞–Ω–Ω—ã—Ö'

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ Google Maps
        google_maps_link = f"https://www.google.com/maps?q={latitude},{longitude}" if latitude and longitude else None

        return {
            'latitude': latitude,
            'longitude': longitude,
            'address': address,
            'google_maps_link': google_maps_link,  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
            'make': tags.get('Image Make', 'Unknown'),
            'model': tags.get('Image Model', 'Unknown'),
            'datetime': tags.get('Image DateTime', 'Unknown'),
            'software': tags.get('Image Software', 'Unknown')
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JPG/PNG —Ñ–∞–π–ª–∞: {e}")
        return None



def extract_metadata(image_path):
    if image_path.lower().endswith(('heic', 'heif')):
        return extract_exif_heic(image_path)
    elif image_path.lower().endswith(('jpg', 'jpeg', 'png')):
        return extract_exif_jpg_png(image_path)
    return None

def format_metadata(metadata):
    output = ["=" * 50, "–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ò", "=" * 50]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GPS-–¥–∞–Ω–Ω—ã—Ö
    if metadata.get('latitude') and metadata.get('longitude'):
        output.append("\nüìç GPS-–î–ê–ù–ù–´–ï:")
        output.append(f"  –®–∏—Ä–æ—Ç–∞: {metadata['latitude']}¬∞")
        output.append(f"  –î–æ–ª–≥–æ—Ç–∞: {metadata['longitude']}¬∞")
        output.append(f"\nüìå –ê–¥—Ä–µ—Å: {metadata.get('address', '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')}")
        if 'google_maps_link' in metadata:
            output.append(f"üåç –°—Å—ã–ª–∫–∞ –Ω–∞ Google Maps: {metadata['google_maps_link']}")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
    output.append("\nüì± –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ï–õ–ï–§–û–ù–ï:")
    output.append(f"  Make: {metadata.get('make', 'Unknown')}")
    output.append(f"  Model: {metadata.get('model', 'Unknown')}")
    output.append(f"  Software: {metadata.get('software', 'Unknown')}")
    output.append(f"  DateTime: {metadata.get('datetime', 'Unknown')}")

    output.append("=" * 50)
    return "\n".join(output)

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–Ω–µ —Å–∂–∞—Ç—É—é), –∏ —è –ø–æ–∫–∞–∂—É –≤–∞–º, –≥–¥–µ –æ–Ω–∞ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞.')

async def handle_image(update: Update, context: CallbackContext) -> None:
    if update.message.photo:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        file = await photo.get_file()
        file_name = file.file_id + ".jpg"
    elif update.message.document:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª
        document = update.message.document
        file = await document.get_file()
        file_name = document.file_name
    else:
        await update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª.')
        return

    # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    file_path = os.path.join(SAVE_PATH, file_name)
    await file.download_to_drive(file_path)

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata = extract_metadata(file_path)
        if metadata:
            metadata_report = format_metadata(metadata)
            await update.message.reply_text(f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –í–æ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:\n{metadata_report}')
        else:
            await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if os.path.exists(file_path):
            os.remove(file_path)


def main() -> None:
    TOKEN = '7932231776:AAE1Qx4ZieIqj7YscZNZMxCtxTFPByhTVco'

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO | filters.ATTACHMENT, handle_image))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ–æ—Ç–æ, –∏ —Ñ–∞–π–ª–æ–≤

    application.run_polling()

if __name__ == '__main__':
    main()
